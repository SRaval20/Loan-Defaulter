# -*- coding: utf-8 -*-
"""CMPE-255 Project Loan Defaulter

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iFyBmoIktQCUMFg1JvoZXi8E4h2yriKF

<h1>Loan-Defaulters

<h2>Libraries and Intallation
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import lightgbm as lgbm
!pip install shapash
from shapash.explainer.smart_explainer import SmartExplainer
# from sklearn.model_selection import GridSearchCV
!pip install tune_sklearn
from tune_sklearn import TuneGridSearchCV
pd.options.display.max_rows = 4000
pd.options.display.max_columns = 100
import warnings
warnings.filterwarnings("ignore")

from sklearn.utils._testing import ignore_warnings
from sklearn.exceptions import ConvergenceWarning

from google.colab import drive
drive.mount('/content/drive')
application_data = pd.read_csv('/content/drive/My Drive/datasets/application_data.csv')

print ("application_data : ",application_data.shape)

"""<h2>Missing Value Info"""

round(100*(application_data.isnull().sum()/len(application_data.index)),2)

"""<h2>Dropping variables having more than 40% missing values"""

application_data=application_data.drop([ 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',
       'APARTMENTS_AVG', 'BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG',
       'YEARS_BUILD_AVG', 'COMMONAREA_AVG', 'ELEVATORS_AVG', 'ENTRANCES_AVG',
       'FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG',
       'LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG', 'NONLIVINGAPARTMENTS_AVG',
       'NONLIVINGAREA_AVG', 'APARTMENTS_MODE', 'BASEMENTAREA_MODE',
       'YEARS_BEGINEXPLUATATION_MODE', 'YEARS_BUILD_MODE', 'COMMONAREA_MODE',
       'ELEVATORS_MODE', 'ENTRANCES_MODE', 'FLOORSMAX_MODE', 'FLOORSMIN_MODE',
       'LANDAREA_MODE', 'LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE',
       'NONLIVINGAPARTMENTS_MODE', 'NONLIVINGAREA_MODE', 'APARTMENTS_MEDI',
       'BASEMENTAREA_MEDI', 'YEARS_BEGINEXPLUATATION_MEDI', 'YEARS_BUILD_MEDI',
       'COMMONAREA_MEDI', 'ELEVATORS_MEDI', 'ENTRANCES_MEDI', 'FLOORSMAX_MEDI',
       'FLOORSMIN_MEDI', 'LANDAREA_MEDI', 'LIVINGAPARTMENTS_MEDI',
       'LIVINGAREA_MEDI', 'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI',
       'FONDKAPREMONT_MODE', 'HOUSETYPE_MODE', 'TOTALAREA_MODE',
       'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE',"OWN_CAR_AGE","OCCUPATION_TYPE"],axis=1)

print("Shape of data frame after removing features having more than 40% of missing values : " , application_data.shape)

"""<h2>Handling Missing Values of Each Variable

<h2>Replacing missing values of 'AMT_GOODS_PRICE' with it's mean
"""

print("Missing Values in 'AMT_GOODS_PRICE' Before : " , application_data['AMT_GOODS_PRICE'].isnull().sum())
application_data["AMT_GOODS_PRICE"].fillna(application_data['AMT_GOODS_PRICE'].mean(), inplace = True)
print("Missing Values in 'AMT_GOODS_PRICE' After : " , application_data['AMT_GOODS_PRICE'].isnull().sum())

"""<h2>Replacing missing values of 'NAME_TYPE_SUITE' with it's mode"""

print("Data type of 'NAME_TYPE_SUITE' variable : " , application_data['NAME_TYPE_SUITE'].dtype)
print(application_data['NAME_TYPE_SUITE'].describe())
print("Missing Values in 'NAME_TYPE_SUITE' Before : " , application_data['NAME_TYPE_SUITE'].isnull().sum())
application_data["NAME_TYPE_SUITE"].fillna("Unaccompanied", inplace = True)
print("Missing Values in 'NAME_TYPE_SUITE' After : " , application_data['NAME_TYPE_SUITE'].isnull().sum())

"""<h2>Replacing missing values of 'OBS_30_CNT_SOCIAL_CIRCLE' with it's median"""

print("Data type of 'OBS_30_CNT_SOCIAL_CIRCLE' variable : " , application_data['OBS_30_CNT_SOCIAL_CIRCLE'].dtype)
print(application_data['OBS_30_CNT_SOCIAL_CIRCLE'].describe())
print("Missing Values in 'OBS_30_CNT_SOCIAL_CIRCLE' Before : " , application_data['OBS_30_CNT_SOCIAL_CIRCLE'].isnull().sum())
print("Median : ", application_data['OBS_30_CNT_SOCIAL_CIRCLE'].median())
application_data["OBS_30_CNT_SOCIAL_CIRCLE"].fillna(application_data['OBS_30_CNT_SOCIAL_CIRCLE'].median(), inplace = True)
print("Missing Values in 'OBS_30_CNT_SOCIAL_CIRCLE' After : " , application_data['OBS_30_CNT_SOCIAL_CIRCLE'].isnull().sum())

"""<h2>Replacing missing values of 'DEF_30_CNT_SOCIAL_CIRCLE' with it's median"""

print("Data type of 'DEF_30_CNT_SOCIAL_CIRCLE' variable : " , application_data['DEF_30_CNT_SOCIAL_CIRCLE'].dtype)
print(application_data['DEF_30_CNT_SOCIAL_CIRCLE'].describe())
print("Missing Values in 'DEF_30_CNT_SOCIAL_CIRCLE' Before : " , application_data['DEF_30_CNT_SOCIAL_CIRCLE'].isnull().sum())
print("Median : ", application_data['DEF_30_CNT_SOCIAL_CIRCLE'].median())
application_data["DEF_30_CNT_SOCIAL_CIRCLE"].fillna(application_data['DEF_30_CNT_SOCIAL_CIRCLE'].median(), inplace = True)
print("Missing Values in 'DEF_30_CNT_SOCIAL_CIRCLE' After : " , application_data['DEF_30_CNT_SOCIAL_CIRCLE'].isnull().sum())

"""<h2>Replacing missing values of 'OBS_60_CNT_SOCIAL_CIRCLE' with it's median"""

print("Data type of 'OBS_60_CNT_SOCIAL_CIRCLE' variable : " , application_data['OBS_60_CNT_SOCIAL_CIRCLE'].dtype)
print(application_data['OBS_60_CNT_SOCIAL_CIRCLE'].describe())
print("Missing Values in 'OBS_60_CNT_SOCIAL_CIRCLE' Before : " , application_data['OBS_60_CNT_SOCIAL_CIRCLE'].isnull().sum())
print("Median : ", application_data['OBS_60_CNT_SOCIAL_CIRCLE'].median())
application_data["OBS_60_CNT_SOCIAL_CIRCLE"].fillna(application_data['OBS_60_CNT_SOCIAL_CIRCLE'].median(), inplace = True)
print("Missing Values in 'OBS_60_CNT_SOCIAL_CIRCLE' After : " , application_data['OBS_60_CNT_SOCIAL_CIRCLE'].isnull().sum())

"""<h2>Replacing missing values of 'DEF_60_CNT_SOCIAL_CIRCLE' with it's median"""

print("Data type of 'DEF_60_CNT_SOCIAL_CIRCLE' variable : " , application_data['DEF_60_CNT_SOCIAL_CIRCLE'].dtype)
print(application_data['DEF_60_CNT_SOCIAL_CIRCLE'].describe())
print("Missing Values in 'DEF_60_CNT_SOCIAL_CIRCLE' Before : " , application_data['DEF_60_CNT_SOCIAL_CIRCLE'].isnull().sum())
print("Median : ", application_data['DEF_60_CNT_SOCIAL_CIRCLE'].median())
application_data["DEF_60_CNT_SOCIAL_CIRCLE"].fillna(application_data['DEF_60_CNT_SOCIAL_CIRCLE'].median(), inplace = True)
print("Missing Values in 'DEF_60_CNT_SOCIAL_CIRCLE' After : " , application_data['DEF_60_CNT_SOCIAL_CIRCLE'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_REQ_CREDIT_BUREAU_HOUR' with it's median"""

# AMT_REQ_CREDIT_BUREAU_HOUR
print("Data type of 'AMT_REQ_CREDIT_BUREAU_HOUR' variable : " , application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].dtype)
print(application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].describe())
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_HOUR' Before : " , application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].isnull().sum())
print("Median : ", application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].median())
application_data["AMT_REQ_CREDIT_BUREAU_HOUR"].fillna(application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].median(), inplace = True)
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_HOUR' After : " , application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_REQ_CREDIT_BUREAU_DAY' with it's median"""

# AMT_REQ_CREDIT_BUREAU_HOUR
print("Data type of 'AMT_REQ_CREDIT_BUREAU_DAY' variable : " , application_data['AMT_REQ_CREDIT_BUREAU_DAY'].dtype)
print(application_data['AMT_REQ_CREDIT_BUREAU_DAY'].describe())
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_DAY' Before : " , application_data['AMT_REQ_CREDIT_BUREAU_DAY'].isnull().sum())
print("Median : ", application_data['AMT_REQ_CREDIT_BUREAU_DAY'].median())
application_data["AMT_REQ_CREDIT_BUREAU_DAY"].fillna(application_data['AMT_REQ_CREDIT_BUREAU_DAY'].median(), inplace = True)
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_DAY' After : " , application_data['AMT_REQ_CREDIT_BUREAU_DAY'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_REQ_CREDIT_BUREAU_WEEK' with it's median"""

# AMT_REQ_CREDIT_BUREAU_HOUR
print("Data type of 'AMT_REQ_CREDIT_BUREAU_WEEK' variable : " , application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].dtype)
print(application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].describe())
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_WEEK' Before : " , application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].isnull().sum())
print("Median : ", application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].median())
application_data["AMT_REQ_CREDIT_BUREAU_WEEK"].fillna(application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].median(), inplace = True)
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_WEEK' After : " , application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_REQ_CREDIT_BUREAU_MON' with it's median"""

# AMT_REQ_CREDIT_BUREAU_MON
print("Data type of 'AMT_REQ_CREDIT_BUREAU_MON' variable : " , application_data['AMT_REQ_CREDIT_BUREAU_MON'].dtype)
print(application_data['AMT_REQ_CREDIT_BUREAU_MON'].describe())
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_MON' Before : " , application_data['AMT_REQ_CREDIT_BUREAU_MON'].isnull().sum())
print("Median : ", application_data['AMT_REQ_CREDIT_BUREAU_MON'].median())
application_data["AMT_REQ_CREDIT_BUREAU_MON"].fillna(application_data['AMT_REQ_CREDIT_BUREAU_MON'].median(), inplace = True)
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_MON' After : " , application_data['AMT_REQ_CREDIT_BUREAU_MON'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_REQ_CREDIT_BUREAU_QRT' with it's median"""

# AMT_REQ_CREDIT_BUREAU_QRT
print("Data type of 'AMT_REQ_CREDIT_BUREAU_QRT' variable : " , application_data['AMT_REQ_CREDIT_BUREAU_QRT'].dtype)
print(application_data['AMT_REQ_CREDIT_BUREAU_QRT'].describe())
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_QRT' Before : " , application_data['AMT_REQ_CREDIT_BUREAU_QRT'].isnull().sum())
print("Median : ", application_data['AMT_REQ_CREDIT_BUREAU_QRT'].median())
application_data["AMT_REQ_CREDIT_BUREAU_QRT"].fillna(application_data['AMT_REQ_CREDIT_BUREAU_QRT'].median(), inplace = True)
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_QRT' After : " , application_data['AMT_REQ_CREDIT_BUREAU_QRT'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_REQ_CREDIT_BUREAU_YEAR' with it's median"""

# AMT_REQ_CREDIT_BUREAU_YEAR
print("Data type of 'AMT_REQ_CREDIT_BUREAU_YEAR' variable : " , application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].dtype)
print(application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].describe())
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_YEAR' Before : " , application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].isnull().sum())
print("Median : ", application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].median())
application_data["AMT_REQ_CREDIT_BUREAU_YEAR"].fillna(application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].median(), inplace = True)
print("Missing Values in 'AMT_REQ_CREDIT_BUREAU_YEAR' After : " , application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].isnull().sum())

"""<h2>Replacing missing values of 'DAYS_LAST_PHONE_CHANGE' with it's median"""

# DAYS_LAST_PHONE_CHANGE
print("Data type of 'DAYS_LAST_PHONE_CHANGE' variable : " , application_data['DAYS_LAST_PHONE_CHANGE'].dtype)
print(application_data['DAYS_LAST_PHONE_CHANGE'].describe())
print("Missing Values in 'DAYS_LAST_PHONE_CHANGE' Before : " , application_data['DAYS_LAST_PHONE_CHANGE'].isnull().sum())
print("Median : ", application_data['DAYS_LAST_PHONE_CHANGE'].median())
application_data["DAYS_LAST_PHONE_CHANGE"].fillna(application_data['DAYS_LAST_PHONE_CHANGE'].median(), inplace = True)
print("Missing Values in 'DAYS_LAST_PHONE_CHANGE' After : " , application_data['DAYS_LAST_PHONE_CHANGE'].isnull().sum())

"""<h2>Replacing missing values of 'AMT_ANNUITY' with it's median"""

# AMT_ANNUITY
print("Data type of 'AMT_ANNUITY' variable : " , application_data['AMT_ANNUITY'].dtype)
print(application_data['AMT_ANNUITY'].describe())
print("Missing Values in 'AMT_ANNUITY' Before : " , application_data['AMT_ANNUITY'].isnull().sum())
print("Median : ", application_data['AMT_ANNUITY'].median())
application_data["AMT_ANNUITY"].fillna(application_data['AMT_ANNUITY'].median(), inplace = True)
print("Missing Values in 'AMT_ANNUITY' After : " , application_data['AMT_ANNUITY'].isnull().sum())

"""<h2>Replacing missing values of 'CNT_FAM_MEMBERS' with it's median"""

# application_data['CNT_FAM_MEMBERS'].unique()
# CNT_FAM_MEMBERS
print("Data type of 'CNT_FAM_MEMBERS' variable : " , application_data['CNT_FAM_MEMBERS'].dtype)
print(application_data['CNT_FAM_MEMBERS'].describe())
print("Missing Values in 'CNT_FAM_MEMBERS' Before : " , application_data['CNT_FAM_MEMBERS'].isnull().sum())
print("Median : ", application_data['CNT_FAM_MEMBERS'].median())
application_data["CNT_FAM_MEMBERS"].fillna(application_data['CNT_FAM_MEMBERS'].median(), inplace = True)
print("Missing Values in 'CNT_FAM_MEMBERS' After : " , application_data['CNT_FAM_MEMBERS'].isnull().sum())

"""<h2>Converting object datatype variable to numeric"""

cat_col = application_data.select_dtypes('object')
cat_col_features = cat_col.columns
cat_col = cat_col.apply(LabelEncoder().fit_transform)

application_data.drop(cat_col_features, axis=1, inplace=True)
application_data = pd.concat([application_data,  cat_col],  axis=1)

application_data.shape

X, y = application_data.drop('TARGET', axis=1), application_data['TARGET']

X['DAYS_BIRTH'] = X['DAYS_BIRTH'].abs()
X['DAYS_EMPLOYED'] = X['DAYS_EMPLOYED'].abs()
X['DAYS_REGISTRATION'] = X['DAYS_REGISTRATION'].abs()
X['DAYS_ID_PUBLISH'] = X['DAYS_ID_PUBLISH'].abs()
X['DAYS_LAST_PHONE_CHANGE'] = X['DAYS_LAST_PHONE_CHANGE'].abs()

"""<h2>Features Selection"""

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, train_size=0.75, random_state=1)
# regressor = lgbm.sklearn.LGBMRegressor(n_estimators=200).fit(Xtrain,ytrain)
# classifier = RandomForestClassifier(n_estimators=200).fit(Xtrain,ytrain)
classifier = LogisticRegression(solver='liblinear')
classifier.fit(Xtrain,ytrain)
xpl = SmartExplainer()
xpl.compile(
    x=Xtest,
    model=classifier
)
xpl.plot.features_importance()

# feature_names
ff = xpl.features_imp
newff = ff[0]
# len(newff)
imp_features = newff[newff>0.015]
imp_features =  imp_features.keys()
imp_features = list(imp_features)
X_imp = X[imp_features]
X_imp.shape

"""<h2>Splitting the data frame"""

X_train, X_test, y_train, y_test = train_test_split(X_imp, y, test_size=0.2, stratify=y)

"""<h2>Parameter dictionaries for LogisticRegression & RandomForestClassifier"""

parametersRFC =  {'n_estimators' : [200,500],
                'max_features' : ['auto' , 'sqrt' , 'log2'],
                'class_weight' : ['balanced'],
                'random_state' : [42],
                'max_samples' : [50000]}

parameters = {
    'solver' : ['newton-cg', 'saga'],
    'penalty' : ['l2']
}

"""<h2>TuneGrideSearchCV for RandomForestClassifier"""

tune_search = TuneGridSearchCV(
    RandomForestClassifier(),
    parametersRFC,
    n_jobs=-1
)
import time # Just to compare fit times
start = time.time()
tune_search.fit(X_train, y_train)
end = time.time()
print("Tune Fit Time:", end - start)
pred = tune_search.predict(X_imp)
accuracy = np.count_nonzero(np.array(pred) == np.array(y)) / len(pred)
print("Tune Accuracy:", accuracy)

"""<h2>TuneGridSearchCV for LogisticRegression"""

tune_searchLR = TuneGridSearchCV(
    LogisticRegression(),
    parameters,
    early_stopping=True,
    # max_iters=10000
)
import time # Just to compare fit times
start = time.time()
tune_searchLR.fit(X_train, y_train)
end = time.time()
print("Tune Fit Time(sec):", end - start)
pred = tune_searchLR.predict(X_test)
accuracy = np.count_nonzero(np.array(pred) == np.array(y_test)) / len(pred)
print("Tune Accuracy:", accuracy)

"""<h2>Results of TuneGridSearchCV"""

print("Dictionary of parameters to test on LogisticRegression :\n" , parameters)
print("Best parameters for Logistic Regression are : \n" , tune_searchLR.best_params_ , "\nwhich yields" , accuracy*100 , "% accuracy")

print("Dictionary of parameters to test on RandomForestClassifier : \n" , parametersRFC)
print("Best parameters for RandomForestClassifier are : \n" , tune_search.best_params_ , "\nwhich yields" , accuracyRFC*100 , "% accuracy")

"""<h2>RandomForestClassifier model for final Evaluation of prediction"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# rfc = RandomForestClassifier(n_estimators=200 , max_features= 'auto' , class_weight='balanced' , random_state=42)
# rfc.fit(X_train, y_train)
# y_pred = rfc.predict(X_imp)

"""<h2>Evaluation Metrices"""

def metrix(y_true, y_pred):
    print("Accuracy of RandomForestClassifier model : " , accuracy_score(y_true, y_pred))
    print("Confusion Matrix : \n" , confusion_matrix(y_true, y_pred))
    print("Classification Report : \n" , classification_report(y_true, y_pred))

metrix(y,y_pred)